(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';
function escapeString(str) {
    return str.replace('"', '\"');
}
function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object');
}
exports.isObject = isObject;
function getObjectName(object) {
    if (object === undefined) {
        return '';
    }
    if (object === null) {
        return 'Object';
    }
    if (typeof object === 'object' && !object.constructor) {
        return 'Object';
    }
    var funcNameRegex = /function (.{1,})\(/;
    var results = (funcNameRegex).exec((object).constructor.toString());
    if (results && results.length > 1) {
        return results[1];
    }
    else {
        return '';
    }
}
exports.getObjectName = getObjectName;
function getType(object) {
    if (object === null) {
        return 'null';
    }
    return typeof object;
}
exports.getType = getType;
function getValuePreview(object, value) {
    var type = getType(object);
    if (type === 'null' || type === 'undefined') {
        return type;
    }
    if (type === 'string') {
        value = '"' + escapeString(value) + '"';
    }
    if (type === 'function') {
        return object.toString()
            .replace(/[\r\n]/g, '')
            .replace(/\{.*\}/, '') + '{…}';
    }
    return value;
}
exports.getValuePreview = getValuePreview;
function getPreview(object) {
    var value = '';
    if (isObject(object)) {
        value = getObjectName(object);
        if (Array.isArray(object))
            value += '[' + object.length + ']';
    }
    else {
        value = getValuePreview(object, object);
    }
    return value;
}
exports.getPreview = getPreview;

},{}],2:[function(require,module,exports){
'use strict';
var helpers_ts_1 = require('./helpers.ts');
var DATE_STRING_REGEX = /(^\d{1,4}[\.|\\/|-]\d{1,2}[\.|\\/|-]\d{1,4})(\s*(?:0?[1-9]:[0-5]|1(?=[012])\d:[0-5])\d\s*[ap]m)?$/;
var defaultConfig = {
    hoverPreviewArrayCount: 100,
    hoverPreviewEnabled: false,
    hoverPreviewFieldCount: 5,
    theme: ''
};
var JSONFormatter = (function () {
    function JSONFormatter(json, open, config, key) {
        if (config === void 0) { config = defaultConfig; }
        this.json = json;
        this.key = key;
        this.open = open === undefined ? 1 : open;
        this.config = config;
        this.config.hoverPreviewEnabled = this.config.hoverPreviewEnabled === undefined ?
            defaultConfig.hoverPreviewEnabled : this.config.hoverPreviewEnabled;
        this.config.hoverPreviewArrayCount = this.config.hoverPreviewArrayCount === undefined ?
            defaultConfig.hoverPreviewArrayCount : this.config.hoverPreviewArrayCount;
        this.config.hoverPreviewFieldCount = this.config.hoverPreviewFieldCount === undefined ?
            defaultConfig.hoverPreviewFieldCount : this.config.hoverPreviewFieldCount;
        this.type = helpers_ts_1.getType(this.json);
        this.hasKey = typeof this.key !== 'undefined';
        this.isOpen = this.open > 0;
        if (this.type === 'string') {
            if (DATE_STRING_REGEX.test(json)) {
                this.isDate = true;
            }
            if (this.json.indexOf('http') === 0) {
                this.isUrl = true;
            }
        }
        this.isArray = Array.isArray(this.json);
        this.isObject = helpers_ts_1.isObject(this.json);
        this.keys = [];
        if (this.isObject) {
            this.keys = Object.keys(this.json).map(function (key) {
                if (key === '') {
                    return '""';
                }
                return key;
            });
        }
        this.isEmptyObject = !this.keys.length && this.isOpen && !this.isArray;
        this.constructorName = helpers_ts_1.getObjectName(this.json);
        this.isEmpty = this.isEmptyObject || (this.keys &&
            !this.keys.length &&
            this.isArray);
    }
    JSONFormatter.prototype.toggleOpen = function () {
        this.isOpen = !this.isOpen;
        if (this.isOpen) {
            this.appendChildern();
        }
        else {
            this.removeChildren();
        }
        if (this.element) {
            this.element.classList.toggle('open');
        }
    };
    JSONFormatter.prototype.getInlinepreview = function () {
        var _this = this;
        if (this.isArray) {
            if (this.json.length > this.config.hoverPreviewArrayCount) {
                return "Array[" + this.json.length + "]";
            }
            else {
                return "[" + this.json.map(helpers_ts_1.getPreview).join(', ') + "]";
            }
        }
        else {
            var keys = this.keys;
            var narrowKeys = keys.slice(0, this.config.hoverPreviewFieldCount);
            var kvs = narrowKeys.map(function (key) { return (key + ":" + helpers_ts_1.getPreview(_this.json[key])); });
            var ellipsis = keys.length >= 5 ? '…' : '';
            return "{" + kvs.join(', ') + ellipsis + "}";
        }
    };
    JSONFormatter.prototype.template = function () {
        function _if(condition) {
            return condition ? normal : empty;
        }
        function empty(template) {
            var expressions = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                expressions[_i - 1] = arguments[_i];
            }
            return '';
        }
        function normal(template) {
            var expressions = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                expressions[_i - 1] = arguments[_i];
            }
            return template.slice(1).reduce(function (accumulator, part, i) {
                return accumulator + expressions[i] + part;
            }, template[0]);
        }
        var templateString = "\n      <a class=\"toggler-link\">\n        " + (_a = ["\n          <span class=\"toggler\"></span>\n        "], _a.raw = ["\n          <span class=\"toggler\"></span>\n        "], _if(this.isObject)(_a)) + "\n\n        " + (_b = ["\n          <span class=\"key\">", ":</span>\n        "], _b.raw = ["\n          <span class=\"key\">", ":</span>\n        "], _if(this.hasKey)(_b, this.key)) + "\n\n        <span class=\"value\">\n\n          " + (_c = ["\n            <span>\n              <span class=\"constructor-name\">", "</span>\n\n              ", "\n\n            </span>\n          "], _c.raw = ["\n            <span>\n              <span class=\"constructor-name\">", "</span>\n\n              ", "\n\n            </span>\n          "], _if(this.isObject)(_c, this.constructorName, (_d = ["\n                <span><span class=\"bracket\">[</span><span class=\"number\">", "</span><span class=\"bracket\">]</span></span>\n              "], _d.raw = ["\n                <span><span class=\"bracket\">[</span><span class=\"number\">", "</span><span class=\"bracket\">]</span></span>\n              "], _if(this.isArray)(_d, this.json && this.json.length)))) + "\n\n          " + (_e = ["\n\n            <", "\n              class=\"", " ", " ", "\"\n              ", "\n            >", "</", ">\n\n          "], _e.raw = ["\n\n            <", "\n              class=\"", " ", " ", "\"\n              ", "\n            >", "</", ">\n\n          "], _if(!this.isObject)(_e, this.isUrl ? 'a' : 'span', this.type, (_f = ["date"], _f.raw = ["date"], _if(this.isDate)(_f)), (_g = ["url"], _g.raw = ["url"], _if(this.isUrl)(_g)), (_h = ["href=\"", "\""], _h.raw = ["href=\"", "\""], _if(this.isUrl)(_h, this.json)), helpers_ts_1.getValuePreview(this.json, this.json), this.isUrl ? 'a' : 'span')) + "\n\n        </span>\n\n        " + (_j = ["\n          <span class=\"preview-text\">", "</span>\n        "], _j.raw = ["\n          <span class=\"preview-text\">", "</span>\n        "], _if(this.config.hoverPreviewEnabled && this.isObject)(_j, this.getInlinepreview())) + "\n      </a>\n\n      <div class=\"children " + (_k = ["object"], _k.raw = ["object"], _if(this.isObject)(_k)) + " " + (_l = ["array"], _l.raw = ["array"], _if(this.isArray)(_l)) + " " + (_m = ["empty"], _m.raw = ["empty"], _if(this.isEmpty)(_m)) + "\"></div>\n    ";
        return templateString.replace(/\s*\n/g, '\n');
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    };
    JSONFormatter.prototype.render = function () {
        var resultHTML = this.template();
        this.element = document.createElement('div');
        this.element.classList.add('json-formatter-row');
        if (this.config && this.config.theme) {
            this.element.classList.add("json-formatter-" + this.config.theme);
        }
        if (this.isOpen) {
            this.element.classList.add('open');
        }
        this.element.innerHTML = resultHTML;
        if (this.isObject && this.isOpen) {
            this.appendChildern();
        }
        this.element.querySelector('a.toggler-link')
            .addEventListener('click', this.toggleOpen.bind(this));
        return this.element;
    };
    JSONFormatter.prototype.appendChildern = function () {
        var _this = this;
        var children = this.element.querySelector('div.children');
        if (!children) {
            return;
        }
        this.keys.forEach(function (key) {
            var formatter = new JSONFormatter(_this.json[key], _this.open - 1, _this.config, key);
            children.appendChild(formatter.render());
        });
    };
    JSONFormatter.prototype.removeChildren = function () {
        if (this.element.querySelector('div.children')) {
            this.element.removeChild(this.element.querySelector('div.children'));
        }
    };
    return JSONFormatter;
})();
if (typeof module !== 'undefined') {
    module.exports = JSONFormatter;
}
else if (typeof window !== 'undefined') {
    this.JSONFormatter = JSONFormatter;
}

},{"./helpers.ts":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
